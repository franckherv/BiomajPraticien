import 'dart:io';

import 'package:awesome_notifications/awesome_notifications.dart';
import 'package:biomaj/constants/app_colors.dart';
import 'package:biomaj/controller/firebase_notification.dart';
import 'package:biomaj/firebase_options.dart';
import 'package:biomaj/models/preferences.dart';
import 'package:biomaj/router/route_generator.dart';
import 'package:biomaj/screens/common/splash/splash_screen.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_messaging/firebase_messaging.dart';
import 'package:flutter/material.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:get/get.dart';
import 'package:get_storage/get_storage.dart';
//import 'package:hive/hive.dart';
import 'package:hive_flutter/hive_flutter.dart';
import 'package:intl/date_symbol_data_local.dart';


// generated by
@pragma('vm:entry-point')
Future<void> _firebaseMessagingBackgroundHandler(RemoteMessage message) async {
  Firebase.initializeApp(
    options: DefaultFirebaseOptions.currentPlatform,
  );
}

HttpClient createHttpClient() {
  final HttpClient client = HttpClient()
    ..badCertificateCallback = (X509Certificate cert, String host, int port) => true;
  return client;
}

Box? box1;
void main() async {
  await Hive.initFlutter();
  await GetStorage.init();
  box1 = await Hive.openBox('logindata');
      HttpOverrides.global = MyHttpOverrides();

  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp(options: DefaultFirebaseOptions.currentPlatform);

  final FirebaseNotification firebaseNotification = Get.put(FirebaseNotification());
  await Hive.initFlutter();

  await firebaseNotification.getTokenToStore();
  await GetStorage.init();
  box1 = await Hive.openBox('logindata');
  // Initialisation des notifications
  await AwesomeNotifications().initialize(
    'resource://drawable/logo',
    [
      NotificationChannel(
        channelGroupKey: 'basic_channel_group',
        channelKey: 'basic_channel',
        channelName: 'Basic notifications',
        channelDescription: 'Notification channel for basic tests',
        defaultColor: const Color(0xff107E69),
        ledColor: Colors.white,
        importance: NotificationImportance.High,
      )
    ],
    channelGroups: [
      NotificationChannelGroup(
        channelGroupKey: 'basic_channel_group', 
        channelGroupName: 'Basic group',
      )
    ],
  );

  bool isAllowToSendNotification = await AwesomeNotifications().isNotificationAllowed();
  if (!isAllowToSendNotification) {
    await AwesomeNotifications().requestPermissionToSendNotifications();
  }
  initializeDateFormatting().then((_) => runApp(const MyApp()));
  //runApp(const MyApp());
}


class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {

    return ScreenUtilInit(
      designSize: const Size(360, 690), 
      minTextAdapt: true,
      splitScreenMode: true,
      builder: (BuildContext context, child) {
        return  GetMaterialApp(
              title: 'biomaj-pro',
              debugShowCheckedModeBanner: false,
              theme: ThemeData(
                fontFamily: 'calibriRegular',
                primarySwatch: AppColors.appMaterialColor,
                visualDensity: VisualDensity.adaptivePlatformDensity,
                useMaterial3: false
              ),
              //initialRoute: '/',
              onGenerateRoute: RouteGenerator.generateRoute,
              home: SplashScreen(
                initialFutures: [
                  SharedPrefs.init(),
                ],
              )
        );
      },
    );
  }
}

class MyHttpOverrides extends HttpOverrides {
  @override
  HttpClient createHttpClient(SecurityContext? context) {
    return super.createHttpClient(context)
      ..badCertificateCallback =
          (X509Certificate cert, String host, int port) => true;
  }
}
 
 





